sha,filename,url,lines,title,comment,priority,category,additional,id,private
"7f7534974981203991ed7c5ebc088da6142831e6","/Prolog/main.pl","","11:0-11:25","obscure","I do not understand the effect of this. Why is it needed? What does it do?\nIt probably needs to be removed and whaever problem you had handled differently\n\nLILY: I use this as an import for non-module files. If a file is a module, I use the 'use_module' predicate, if a file is not a module this is how I have been importing its predicates","2","Code-Style","","49ef65df-ed8e-47fa-ba71-56b606a88e16","1"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/main.pl","","52:0-54:23","Clarity","2 remarks:\n-according to the document of asserta/1 https://eclipseclp.org/doc/bips/kernel/dynamic/asserta-1.html the predicate asserted need to be delcared dynamic\n-you really have to document the use of these predicates: what do they represent, what is their format? Best to do that when you delcare them as dynamic","0","Best Practices","","43fe32dc-04f8-411b-8346-1968356772e8","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/main.pl","","40:0-51:56","Handling of test drivers","Some remarks on the testdrivers generated\n- they are best generated in a timestamped folder e.g. function_name_date_time_generated as this is very useful for regression and debugging\n- they should not be deleted: create in a new folder as mentioned above ","2","Architecture","","a25eb4ef-fc12-4d55-ba01-8758468d4204","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/main.pl","","40:0-40:18","Rename","rename setup_test_driver?","2","Best Practices","","733e7c83-03f3-4ec9-89fa-7399f58cfeb8","0"
"7f7534974981203991ed7c5ebc088da6142831e6","/Prolog/main.pl","","23:4-23:20","Comprehension","What does this do? Where is it defined? Hard to follow\n\n\nLILY: This is a challenge I have with Prolog so far, I think we spoke about it at a very early point. I am not sure how to specificy where predicates come from, other than pre-appending the filename/module in the predicate name, though I feel this becomes messy quite quickly. (Eg: statement_handler__function_handler(...)","2","Best Practices","","676ee09c-a132-4141-b5c4-01f285cac108","1"
"11e970041b42789494c8e797c5e6e2c057b9189a","/Prolog/main.pl","","57:0-57:5","Comprehension","Where is this used?\n\nLILY: It is not used in code. I use this predicate in the TkEclipse GUI during development","2","Best Practices","","0b86b67e-3876-4a34-9069-d6f3ff86678c","1"
"11e970041b42789494c8e797c5e6e2c057b9189a","/Prolog/statement_handler.pl","","3:0-3:28","Comprehension","What does this do? \n\nLILY: Imports the test_case_generation functions. It is used as the last line of the function_handler predicate","2","Best Practices","","a4845be3-6743-47f0-aa3d-7f07fd09ca35","1"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","11:4-11:14","comprehension","What exactly do you measn by concretise? I am not familiar wit hthis term in Prolog nor symbolic execution so it makes understanding difficult.\nWhere is that predicate?","0","Best Practices","","8bc8a456-3b4b-433d-aede-7f71942272d1","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","66:41-66:66","reformat","rather than returning an anonymous list return a compound such as\nreturn(Return_value, Return_type) in case os a return, and 'false' otherwise ","3","Best Practices","","c5dd6de5-3401-48cd-89dc-9c47922ded8b","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","33:14-33:32","best practice","See other comment below: this should not be logically, a list.","2","Best Practices","","584f8b94-1e79-4a83-8531-831bc1547402","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","31:0-31:17","rename","So why not rename statement_handler to handle and get rid of this special case?\n","2","Best Practices","","fa0b8957-95be-4af3-8e96-adeb485d07ce","0"
"11e970041b42789494c8e797c5e6e2c057b9189a","/Prolog/statement_handler.pl","","52:55-52:67","rename","Why this extra level of direction? Just handle the declartions here rather than in a seperate file\n\nLILY: There currently is declaration predicates in declarations.pl,and this utilises those. The predicates could be moved into this file, though it I prefer it in a seperate file due to the statement_handler curating which predicates require to be called rather than doing it here (With exceptions if they are minimal in size. A declaration can be of many types, leading me to seperation them). ","2","Best Practices","","d3e2f60e-31be-4cfb-ad4c-240ad08e762b","1"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","55:0-55:36","logical error?","I am surprised this works.\n    evaluate_expression(Constraint), needs to be brought in inside the first choice point otherwise the ptc_solver with get Constraint and on backtracking not(Constraint) which will always fail...","3","Architecture","","686801b1-4c3d-474d-b350-ce3722f09876","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/statement_handler.pl","","75:0-78:27","comprehension","this kind of things (you do it in several places abaove) is not really Prolog style (they look like assignments). Don't introduce intermediary variables if they can be avoided.\nBetter rewritten as:\n\nhandle(return, [true, void, _]) :-\n    writeln(""Void Return"").\n\nor as mentioned above\n\nhandle(return, return(true, void, _)) :-\n    writeln(""Void Return"").\n\nor such like","2","Best Practices","","56a8a742-6606-4b67-8736-aed51209d9f6","0"
"11e970041b42789494c8e797c5e6e2c057b9189a","/Prolog/declaration.pl","","16:4-16:39","understanding","why do you create a copy of the varaible just to get the name?\n\nLILY: Without the copy, the var_names predicate (Coming from .names file from the parser) will ground the variable by matching it to an atom, blocking it from being assigned a c_var at a later point ","0","Best Practices","","dec5f783-c02d-416d-bc05-4b7c3550669b","1"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/concretise.pl","","13:0-13:24","not a special case","This is not a special case, remove the comment and and make it part of the other 'concretise'","0","Code-Style","","fc80df8f-4d83-40c3-a2d4-d273173a8a03","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/concretise.pl","","41:0-51:6","?","Yes, I do not understnd why this would be needed.\n","0","Code-Style","","c62e73ea-b175-4ba8-aa67-cc74400b5d76","0"
"b4771e06b6537d747945f955b6adca3608049bad","/Prolog/concretise.pl","","34:0-39:21","issue","As mentionned,\nall the integer varaibles that need labeling need to be sent at the time in one go to the solver and not one by one.\n\nThis is for optimisation purposes wuithin the solver. This is important for efficiency purposes.","3","Performance","","4a77a216-fbda-4a51-9233-42047409bd83","0"
"7f7534974981203991ed7c5ebc088da6142831e6","/Prolog/main.pl","","28:4-28:36","CHRIS: 'char' type exists in PTC_solver?","Does a C 'char' type exist in the PTC_solver? I think I remember from a meeting mentions that a char type already exists.","0","Maintainability","https://github.com/echancrure/PTC-Solver/blob/d95463bc49378cef30187d2655c1dd7c40dfca39/source/ptc_solver_types1.pl#L9","9583ce5c-aeca-4e8b-9f96-a747c6c80ec5","1"
